// 二进制或运算符（or）：符号为|，表示若两个二进制位都为0，则结果为0，否则为1。
// 二进制与运算符（and）：符号为&，表示若两个二进制位都为1，则结果为1，否则为0。
// 二进制否运算符（not）：符号为~，表示对一个二进制位取反。
// 异或运算符（xor）：符号为^，表示若两个二进制位不相同，则结果为1，否则为0。
// 左移运算符（left shift）：符号为<<，详见下文解释。
// 右移运算符（right shift）：符号为>>，详见下文解释。
// 头部补零的右移运算符（zero filled right shift）：符号为>>>，详见下文解释。

// function toInt32(n) {
//   n = n | 0;

//   return n;
// }

// 将一个值 自动转换为32位整数 如果大于2 ** 32 那么大于等于的部分将会被舍去
// console.log(toInt32(244.44443432423432));
// console.log(toInt32("244.44443432423432"));
// console.log(toInt32(Math.pow(2, 32)));

// 位运算或 可用于舍去小数部分 取整 2147483647
console.log(0 | 124.43242);

// 位运算 与 只要运算子中有一个为0 就返回0
console.log(1 & 2);
